import{calcRelativeDateTimeDifference,clacDegreesOfPercent,convertMonthToMonthName,filterCompletedTodos,filterNotCompletedTodos,findTodoIndex,findUser,getCookie,getFromLocalStorage,insertTextContent,normalizeDateTime,saveToLocalStorage}from"../modules/utils.js";import{showCreateTodoModal,showEditTodoModal}from"../modules/todo-modal.js";import{getPriorityColorClass,getStatusColorClass,hideLoader,hideTodoOptions,showLoader,showTodoOptions}from"../modules/shared.js";let DB={},user={};function generateTodoTemplate(t){const{id:e,title:s,description:o,cover:n,createdAt:d,priority:i,status:a}=t,r=getPriorityColorClass(i),l=getStatusColorClass(a);return`\n        <div class="max-w-100 relative py-3.5 pl-8 xl:pl-10 pr-7 xl:pr-7.5 outline outline-quick-silver rounded-[14px]">\n          \x3c!-- Circle Shape--\x3e\n          <div class="absolute top-3 xl:top-3.5 left-3 xl:left-3.5 size-2.5 xl:size-3 border-2 border-${l} rounded-full"></div>\n          \x3c!-- Menu Icon --\x3e\n          <div\n            class="task-options absolute top-2.5 right-3 xl:right-3.5">\n            <div class="task-options__icon flex gap-x-0.5 cursor-pointer py-1">\n              <span class="size-1 border border-quick-silver rounded-full"></span>\n              <span class="size-1 border border-quick-silver rounded-full"></span>\n              <span class="size-1 border border-quick-silver rounded-full"></span>\n            </div>\n            \x3c!-- Drop-Down --\x3e\n            <div\n              class="task-options__list  invisible opacity-0 absolute z-10 right-0 bg-white flex flex-col gap-y-1.25 mt-0.5 px-1.25 pb-1.75 pt-2.25 leading-5 rounded-lg shadow"\n              data-is-visible="false"\n              >\n              <button class="task-options__edit-task text-xs text-start cursor-pointer" onclick="startTaskHandler('${e}')">\n                Start\n              </button>\n              <button class="task-options__edit-task text-xs text-start cursor-pointer" onclick="editTaskHandler('${e}')">\n                Edit\n              </button>\n              <button class="task-options__delete-task text-xs text-start cursor-pointer" onclick="deleteTaskHandler('${e}')">\n                Delete\n              </button>\n              <button class="task-options__finish-task text-xs text-start cursor-pointer" onclick="finishTaskHandler('${e}')">\n                Finish\n              </button>\n            </div>\n          </div>\n          <div class="flex justify-between gap-x-2 xl:gap-x-2.5">\n            <div>\n              <p class="text-sm xl:text-base/[19px] font-semibold">\n                <a class="line-clamp-2" href="./pages/todo-details.html?id=${e}">\n                  ${s}\n                </a>\n              </p>\n              <p class="text-xs xl:text-sm/[17px] line-clamp-4 mt-2 xl:mt-2.5">\n                ${o}\n              </p>\n            </div>\n            <div class="my-auto size-20 lg:size-22 shrink-0">\n              <a href="./pages/todo-details.html?id=${e}">\n                <img class="aspect-square h-full rounded-xl lg:rounded-[14px] overflow-hidden"\n                ${n.img?`src="${n.img}"`:`src="./assets/images/todoes/${n.path}"`}\n                  alt="${n.alt}">\n              </a>  \n            </div>\n          </div>\n\n          <div class="flex justify-between gap-x-0.5 text-[10px] mt-3 xl:mt-3.5">\n            <span>\n              Priority:\n              <span class="capitalize block xl:inline text-${r}">${i}</span>\n            </span>\n            <span>\n              Status:\n              <span class="capitalize block xl:inline text-${l}">\n                ${a}\n              </span>\n            </span>\n            <span class="text-quick-silver">\n              Created on:\n              <span class="block xl:inline">${normalizeDateTime(d).date}</span>\n            </span>\n          </div>\n        </div>`}function insertFirstTodoDate(t){const e=document.getElementById("todo-date"),s=document.getElementById("todo-time-difference"),o=normalizeDateTime(t),n=convertMonthToMonthName(o.months);e.innerHTML=`${o.days}  ${n}`,s.innerHTML=`â€¢ ${calcRelativeDateTimeDifference(t)}`}function insertTodos(t){const e=document.getElementById("todos-container");t=filterNotCompletedTodos(t);let s="",o=null;t.length?(insertFirstTodoDate(t[0].createdAt),t.forEach((t=>{"completed"!==t.status.toLowerCase()&&(o&&o!==t.createdAt.slice(0,10)&&(s+='<div class="w-[calc(100%+24px)] lg:w-[calc(100%+56px)] 2xl:w-[calc(100%+68px)] -ml-3 lg:-ml-7 2xl:-ml-8.5 my-3 lg:my-6 border-t border-quick-silver/41"></div>'),o=t.createdAt.slice(0,10),s+=generateTodoTemplate(t))}))):s="<span class='text-center text-davy-grey py-5'>No Todo created yet</span>",e.innerHTML=s}function insertTodosStatistics(t){let e="";const s=document.getElementById("todos-stats-container");for(const s in t){const o=getStatusColorClass(s);e+=`\n  <div>\n    <div\n      class="donut-chart shrink-0"\n      style="\n        background: conic-gradient(\n          var(--color-${o}) 0deg \n          ${clacDegreesOfPercent(t[s])}deg, var(--color-light-silver) \n          ${clacDegreesOfPercent(t[s])}deg 360deg\n        );\n      "\n    >\n      <span class="donut-chart__title">${t[s]}%</span>\n    </div>\n    <li\n      class="capitalize block mt-5 text-xs lg:text-sm xl:text-base text-center dot-icon dot-icon--${o}"\n    >\n      ${s}\n    </li>\n  </div>`}s.innerHTML=e}function insertCompletedTodos(t){let e="";t=filterCompletedTodos(t);const s=document.getElementById("todos-completed-container");t.length&&t.forEach((t=>{e+=generateTodoTemplate(t)})),e||(e="<span class='text-center text-davy-grey py-5'>Nothing Completed yet</span>"),s.innerHTML=e}function setTodoOptionsEvent(){[...document.getElementsByClassName("task-options__icon")].forEach((t=>t.addEventListener("click",showTodoOptions)))}function updateDB(t){const e=DB.users.findIndex((e=>String(e.id)===String(t.id)));DB.users[e]=t,saveToLocalStorage("DB",DB),DB=getFromLocalStorage("DB"),user=DB.users[e]}function updateStatistics(t){let e,s,o;const n=t.length;e=s=o=0,n?(t.forEach((t=>{switch(t.status){case"not started":e++;break;case"in progress":s++;break;case"completed":o++}})),user.statistics={completed:Math.round(o/n*100),"in progress":Math.round(s/n*100),"not started":Math.round(e/n*100)}):user.statistics={completed:0,"in progress":0,"not started":0},updateDB(user)}function startTaskHandler(t){hideTodoOptions();const e=findTodoIndex(t,user.todos);-1!==e&&(user.todos[e].status="in progress",updateDB(user),insertTodos(user.todos),insertCompletedTodos(user.todos),updateStatistics(user.todos),insertTodosStatistics(user.statistics),setTodoOptionsEvent())}function editTaskHandler(t){hideTodoOptions();const e=findTodoIndex(t,user.todos);-1!==e&&showEditTodoModal(user.todos[e])}async function deleteTaskHandler(t){hideTodoOptions();if(await swal({title:"Delete Todo",text:"are you sure want to delete todo?",icon:"warning",buttons:["Cancel","Delete"]})){const e=user.todos.filter((e=>String(e.id)!==String(t)));user.todos=[...e],updateDB(user),insertTodos(user.todos),insertCompletedTodos(user.todos),updateStatistics(user.todos),insertTodosStatistics(user.statistics),setTodoOptionsEvent()}}function finishTaskHandler(t){hideTodoOptions();const e=findTodoIndex(t,user.todos);-1!==e&&(user.todos[e].status="completed",updateDB(user),insertTodos(user.todos),insertCompletedTodos(user.todos),updateStatistics(user.todos),insertTodosStatistics(user.statistics),setTodoOptionsEvent())}window.addEventListener("load",(async()=>{showLoader();const t=getCookie("userId");DB=getFromLocalStorage("DB"),user=findUser(t,DB.users),insertTextContent(`Welcome ${user.name} ðŸ‘‹`,"user-name"),insertTodosStatistics(user.statistics),insertCompletedTodos(user.todos),insertTodos(user.todos),setTodoOptionsEvent(),hideLoader()})),window.startTaskHandler=startTaskHandler,window.editTaskHandler=editTaskHandler,window.deleteTaskHandler=deleteTaskHandler,window.finishTaskHandler=finishTaskHandler;const showCreateTodoModalBtn=document.getElementById("show-create-todo-modal");function saveTodoHandler(t){showLoader();let e=[...user.todos];user.todos.length=0,user.todos=[t.detail,...e],updateDB(user),insertTodos(user.todos),updateStatistics(user.todos),insertTodosStatistics(user.statistics),setTodoOptionsEvent(),hideLoader()}function updateTodoHandler(t){showLoader();const e=t.detail,s=findTodoIndex(e.id,user.todos);-1!==s&&(user.todos[s]=e,updateDB(user),insertTodos(user.todos),insertCompletedTodos(user.todos),updateStatistics(user.todos),insertTodosStatistics(user.statistics),setTodoOptionsEvent()),hideLoader()}showCreateTodoModalBtn.addEventListener("click",showCreateTodoModal),document.addEventListener("todoCreated",saveTodoHandler),document.addEventListener("todoUpdated",updateTodoHandler);